{"version":3,"sources":["components/Header/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance/Balance.js","components/IncomeExpenses/IncomeExpenses.js","components/Transaction/Transaction.js","components/TransactionList/TransactionList.js","components/AddTransaction/AddTransaction.js","App.js","reportWebVitals.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","nanoid","htmlFor","onChange","target","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAS,WACpB,OAAO,kD,qBCJM,WAACC,EAAOC,GACrB,OAAQA,EAAOC,MACb,IAAK,qBACH,OAAO,2BACFF,GADL,IAEEG,aAAcH,EAAMG,aAAaC,QAC/B,SAACC,GAAD,OAAiBA,EAAYC,KAAOL,EAAOM,aAIjD,IAAK,kBACH,OAAO,2BACFP,GADL,IAEEG,aAAa,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,iBAE5C,QACE,OAAOH,ICZPQ,EAAe,CACnBL,aAAc,IAIHM,EAAgBC,wBAAcF,GAG9BG,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/B,EAA0BC,qBAAWC,EAAYN,GAAjD,mBAAOR,EAAP,KAAce,EAAd,KAiBA,OACE,cAACN,EAAcO,SAAf,CACEC,MAAO,CACLd,aAAcH,EAAMG,aACpBe,kBAlBN,SAA2BZ,GACzBS,EAAS,CACPb,KAAM,qBACNK,QAASD,KAgBPa,eAZN,SAAwBd,GACtBU,EAAS,CACPb,KAAM,kBACNK,QAASF,MAKX,SAOGO,KClCMQ,G,MAAU,WACrB,IAGMC,EAHmBC,qBAAWb,GAA5BN,aAEqBoB,KAAI,SAAClB,GAAD,OAAiBA,EAAYmB,UACxCC,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,GAAGC,QAAQ,GAEtE,OACE,qCACE,4CACA,+BAAKP,EAAL,iBCTOQ,G,MAAiB,WAC5B,IAEMC,EAFmBR,qBAAWb,GAA5BN,aAEqBoB,KAAI,SAAClB,GAAD,OAAiBA,EAAYmB,UAExDO,EAASD,EACZ1B,QAAO,SAACuB,GAAD,OAAUA,EAAO,KACxBF,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,GACrCC,QAAQ,GAELI,EACJF,EAAQ1B,QAAO,SAACuB,GAAD,OAAUA,EAAO,KAAGF,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,IACtE,GAAGC,QAAQ,GAEf,OACE,0BAASK,UAAU,kBAAnB,UACE,oCACE,0CACA,oBAAGA,UAAU,aAAb,UAA2BF,EAA3B,eAGF,oCACE,wCACA,oBAAGE,UAAU,cAAb,UAA4BD,EAA5B,oBCvBKE,G,MAAc,SAAC,GAAqB,IAAnB7B,EAAkB,EAAlBA,YACpBa,EAAsBI,qBAAWb,GAAjCS,kBAEFiB,EAAO9B,EAAYmB,OAAS,EAAI,IAAM,IAC5C,OACE,qBAAIS,UAAW5B,EAAYmB,OAAS,EAAI,QAAU,OAAlD,UACGnB,EAAY+B,KACb,iCACGD,EACAE,KAAKC,IAAIjC,EAAYmB,QAFxB,YAIA,wBACEe,QAAS,kBAAMrB,EAAkBb,EAAYC,KAC7C2B,UAAU,aAFZ,yBCVOO,G,MAAkB,WAC7B,IAAQrC,EAAiBmB,qBAAWb,GAA5BN,aAER,OACE,qCACE,2CACA,oBAAI8B,UAAU,OAAd,SACG9B,EAAaoB,KAAI,SAAClB,GAAD,OAChB,cAAC,EAAD,CAAkCA,YAAaA,GAA7BA,EAAYC,c,OCR3BmC,G,MAAiB,WAC5B,MAAwBC,mBAAS,IAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA4BD,mBAAS,GAArC,mBAAOlB,EAAP,KAAeoB,EAAf,KAEQzB,EAAmBG,qBAAWb,GAA9BU,eAaR,OACE,qCACE,gEACA,uBAAM0B,SAdO,SAACC,GAChBA,EAAEC,iBAEF,IAAMC,EAAiB,CACrB1C,GAAI2C,cACJb,OACAZ,QAASA,GAGXL,EAAe6B,IAKb,UACE,sBAAKf,UAAU,eAAf,UACE,uBAAOiB,QAAQ,OAAf,sBACA,uBACEhD,KAAK,OACLe,MAAOmB,EACPe,SAAU,SAACL,GAAD,OAAOH,EAAQG,EAAEM,OAAOnC,QAClCoC,YAAY,8BAGhB,sBAAKpB,UAAU,eAAf,UACE,uBAAOiB,QAAQ,SAAf,6DAGA,uBACEhD,KAAK,SACLe,MAAOO,EACP2B,SAAU,SAACL,GAAD,OAAOF,EAAUE,EAAEM,OAAOnC,QACpCoC,YAAY,8BAGhB,wBAAQpB,UAAU,MAAlB,8CCpBOqB,MAhBf,WACE,OACE,cAAC,EAAD,UACE,uBAAMrB,UAAU,cAAhB,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,aCPKsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c90369e1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\n\nexport const Header = () => {\n  return <h2>EXPENSE TRACKER</h2>;\n};\n","export default (state, action) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction.id !== action.payload\n        ),\n      }; //usamos spread operator para que nos devuleva el estado. Luego filtramos por ID para que nos devuelva todas las transacciones menos la que se ha borrado (la función está en el global state)\n\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions], //spread operator para que nos devuelva un array con todas las transacciones que había, junto con la nueva, que es el action.payload (definida en global state)\n      };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\n\n//estado inicial; será un objeto que contendrá nuestras transacciones\nconst initialState = {\n  transactions: [],\n};\n\n//Creamos el context\nexport const GlobalContext = createContext(initialState);\n\n//para que todos los componentes de la app tengan acceso al estado global, necesitamos un provider que los envuelva\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  //Actions que harán calls al reducer tanto para borrar items como para añadir transactions\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id,\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction,\n    });\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport \"./Balance.scss\";\n\nexport const Balance = () => {\n  const { transactions } = useContext(GlobalContext); //Nuestro useContext cogerá la data del globalContext\n\n  const amounts = transactions.map((transaction) => transaction.amount); //mapeamos todas las transacciones en un nuevo array\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2); //usamos reduce para añadirlas todas y toFix para tener dos decimales\n\n  return (\n    <>\n      <h4>Tu dinero:</h4>\n      <h1>{total}€</h1>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport \"./IncomeExpenses.scss\";\n\nexport const IncomeExpenses = () => {\n  const { transactions } = useContext(GlobalContext); //Nuestro useContext cogerá la data del globalContext\n\n  const amounts = transactions.map((transaction) => transaction.amount); //mapeamos todas las transacciones en un nuevo array\n\n  const income = amounts\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2); //filtramos las cantidades para coger solo las positivas; las añadimos con reduce, y añadimos dos decimales\n\n  const expense =\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -(1).toFixed(2); //igual para los gastos, pero el filter para números menores que 0, y al final del reduce multiplicamos por -1 para que sea negativo siempre\n\n  return (\n    <section className=\"incExpContainer\">\n      <article>\n        <h4>Ingresos</h4>\n        <p className=\"money plus\">{income}€</p>\n      </article>\n\n      <article>\n        <h4>Gastos</h4>\n        <p className=\"money minus\">{expense}€</p>\n      </article>\n    </section>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport \"./Transaction.scss\";\n\nexport const Transaction = ({ transaction }) => {\n  const { deleteTransaction } = useContext(GlobalContext); //añadimos el context desde el contexto global para borrar transactions\n\n  const sign = transaction.amount < 0 ? \"-\" : \"+\"; //variable que determina el símbolo de la cantidad en el historial de transacciones\n  return (\n    <li className={transaction.amount < 0 ? \"minus\" : \"plus\"}>\n      {transaction.text}\n      <span>\n        {sign}\n        {Math.abs(transaction.amount)}€\n      </span>\n      <button\n        onClick={() => deleteTransaction(transaction.id)} //lo usamos con arrow function; necesitamos la id, que es lo que usa para saber cúal borrar\n        className=\"delete-btn\"\n      >\n        ⊖\n      </button>\n    </li>\n  ); //el operador Math.abs convierte el número en absoluto para que no salgan dobles signos -\n};\n","import React, { useContext } from \"react\";\nimport { Transaction } from \"../Transaction/Transaction\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport \"./TransactionList.scss\";\n\nexport const TransactionList = () => {\n  const { transactions } = useContext(GlobalContext); //Nuestro contexto pillará datos del globalcontext\n\n  return (\n    <>\n      <h3>Historial</h3>\n      <ul className=\"list\">\n        {transactions.map((transaction) => (\n          <Transaction key={transaction.id} transaction={transaction} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nimport { nanoid } from \"nanoid\";\nimport \"./AddTransaction.scss\";\n\nexport const AddTransaction = () => {\n  const [text, setText] = useState(\"\"); //estado para controlar el input del \"concepto\" a introducir\n  const [amount, setAmount] = useState(0); //estado para controla el input de la \"cantidad\" a introducir\n\n  const { addTransaction } = useContext(GlobalContext);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTransaction = {\n      id: nanoid(),\n      text,\n      amount: +amount, //para que la cantidad siempre sea dato de tipo number. Se podría hacer también con parseint.\n    };\n\n    addTransaction(newTransaction);\n  };\n  return (\n    <>\n      <h3>Añadir nueva transacción</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Concepto</label>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)} //función para que react añada lo que escribamos al estado.\n            placeholder=\"Introducir concepto...\"\n          />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\">\n            Cantidad (negativo - gasto, positivo - ingreso)\n          </label>\n          <input\n            type=\"number\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)} //función para que react añada lo que escribamos al estado.\n            placeholder=\"Introducir cantidad...\"\n          />\n        </div>\n        <button className=\"btn\">Añadir transacción</button>\n      </form>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Header } from \"./components/Header/Header\";\nimport { Balance } from \"./components/Balance/Balance\";\nimport { IncomeExpenses } from \"./components/IncomeExpenses/IncomeExpenses\";\nimport { TransactionList } from \"./components/TransactionList/TransactionList\";\nimport { AddTransaction } from \"./components/AddTransaction/AddTransaction\";\n\nimport { GlobalProvider } from \"./context/GlobalState\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <main className=\"mainWrapper\">\n        <Header />\n        <div className=\"container\">\n          <Balance />\n          <IncomeExpenses />\n          <TransactionList />\n          <AddTransaction />\n        </div>\n      </main>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}